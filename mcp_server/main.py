# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:41:50+00:00



import argparse
import json
import os
from datetime import datetime as datetime_aliased
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic
from fastapi import Path, Query, Request, UploadFile
from pydantic import PositiveInt, conint, constr

from models import (
    Crash,
    DiagnosticsStackTrace,
    DownloadType,
    ErrorType,
    ErrorType2,
    ErrorType6,
    ErrorType8,
    ErrorType10,
    EventName,
    FieldInlinecount,
    FieldOrderBy,
    FieldOrderby,
    Form,
    Format,
    Format2,
    GroupStatus,
    GroupType2,
    Hashes,
    Order,
    Os12,
    Period,
    Platform13,
    ProvisioningProfileResponse,
    Service13,
    Sort,
    Sort2,
    SourceHost,
    Stacktrace,
    Status31,
    SymbolType3,
    Tools,
    Udids,
    Versions1,
)
from models.V0 import (
    Field1AccountTestExportAccountsGetResponse,
    Field1AccountTestExportFeatureFlagsGetResponse,
    Field1AccountTestExportGetResponse,
    Field1AdministeredOrgsGetResponse,
    Field1AdministeredOrgsGetResponseModel,
    Field1ApiTokensApiTokenIdDeleteResponse,
    Field1ApiTokensGetResponse,
    Field1ApiTokensGetResponseModel,
    Field1ApiTokensPostRequest,
    Field1ApiTokensPostResponse,
    Field1ApiTokensPostResponseModel,
    Field1AppsGetResponse,
    Field1AppsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsActiveDeviceCountsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsActiveDeviceCountsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNameDeleteResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNameGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNameGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNameHeadResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutRequest,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostRequest,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesMetadataCustomPropertiesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesMetadataCustomPropertiesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesMetadataDevicePropertiesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesMetadataDevicePropertiesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesMetadataDevicePropertiesPropertyNameValuesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsAudiencesMetadataDevicePropertiesPropertyNameValuesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashCountsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashCountsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashfreeDevicePercentagesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashfreeDevicePercentagesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdCrashCountsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdCrashCountsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdModelsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdModelsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdOperatingSystemsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdOperatingSystemsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdOverallGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsCrashGroupIdOverallGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsPostRequest,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsPostResponse,
    Field1AppsOwnerNameAppNameAnalyticsCrashGroupsPostResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostRequest,
    Field1AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostResponse,
    Field1AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventLogsEventNameDeleteResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameCountPerDeviceGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameCountPerDeviceGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameCountPerSessionGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameCountPerSessionGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameDeleteResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameDeviceCountGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameDeviceCountGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameEventCountGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNameEventCountGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNamePropertiesEventPropertyNameCountsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNamePropertiesEventPropertyNameCountsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNamePropertiesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsEventNamePropertiesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsEventsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsEventsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsGenericLogFlowGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsGenericLogFlowGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsLanguagesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsLanguagesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsLogFlowGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsLogFlowGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsModelsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsModelsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsOsesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsOsesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsPlacesGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsPlacesGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsSessionCountsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsSessionCountsGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsSessionDurationsDistributionGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsSessionDurationsDistributionGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsSessionsPerDeviceGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsSessionsPerDeviceGetResponseModel,
    Field1AppsOwnerNameAppNameAnalyticsVersionsGetResponse,
    Field1AppsOwnerNameAppNameAnalyticsVersionsGetResponseModel,
    Field1AppsOwnerNameAppNameApiTokensApiTokenIdDeleteResponse,
    Field1AppsOwnerNameAppNameApiTokensGetResponse,
    Field1AppsOwnerNameAppNameApiTokensGetResponseModel,
    Field1AppsOwnerNameAppNameApiTokensPostRequest,
    Field1AppsOwnerNameAppNameApiTokensPostResponse,
    Field1AppsOwnerNameAppNameApiTokensPostResponseModel,
    Field1AppsOwnerNameAppNameAppleMappingDeleteResponse,
    Field1AppsOwnerNameAppNameAppleMappingGetResponse,
    Field1AppsOwnerNameAppNameAppleMappingGetResponseModel,
    Field1AppsOwnerNameAppNameAppleMappingPostRequest,
    Field1AppsOwnerNameAppNameAppleMappingPostResponse,
    Field1AppsOwnerNameAppNameAppleMappingPostResponseModel,
    Field1AppsOwnerNameAppNameAppleTestFlightGroupsGetResponse,
    Field1AppsOwnerNameAppNameAppleTestFlightGroupsGetResponseModel,
    Field1AppsOwnerNameAppNameAvatarDeleteResponse,
    Field1AppsOwnerNameAppNameAvatarDeleteResponseModel,
    Field1AppsOwnerNameAppNameAvatarPostResponse,
    Field1AppsOwnerNameAppNameAvatarPostResponseModel,
    Field1AppsOwnerNameAppNameAzureSubscriptionsAzureSubscriptionIdDeleteResponse,
    Field1AppsOwnerNameAppNameAzureSubscriptionsGetResponse,
    Field1AppsOwnerNameAppNameAzureSubscriptionsGetResponseModel,
    Field1AppsOwnerNameAppNameAzureSubscriptionsPostRequest,
    Field1AppsOwnerNameAppNameAzureSubscriptionsPostResponse,
    Field1AppsOwnerNameAppNameBillingAggregatedGetResponse,
    Field1AppsOwnerNameAppNameBillingAggregatedGetResponseModel,
    Field1AppsOwnerNameAppNameBranchesBranchBuildsGetResponse,
    Field1AppsOwnerNameAppNameBranchesBranchBuildsPostRequest,
    Field1AppsOwnerNameAppNameBranchesBranchBuildsPostResponse,
    Field1AppsOwnerNameAppNameBranchesBranchConfigDeleteRequest,
    Field1AppsOwnerNameAppNameBranchesBranchConfigDeleteResponse,
    Field1AppsOwnerNameAppNameBranchesBranchConfigGetResponse,
    Field1AppsOwnerNameAppNameBranchesBranchConfigGetResponseModel,
    Field1AppsOwnerNameAppNameBranchesBranchConfigPostRequest,
    Field1AppsOwnerNameAppNameBranchesBranchConfigPostResponse,
    Field1AppsOwnerNameAppNameBranchesBranchConfigPutRequest,
    Field1AppsOwnerNameAppNameBranchesBranchConfigPutResponse,
    Field1AppsOwnerNameAppNameBranchesBranchExportConfigGetResponse,
    Field1AppsOwnerNameAppNameBranchesBranchExportConfigGetResponseModel,
    Field1AppsOwnerNameAppNameBranchesBranchToolsetProjectsGetResponse,
    Field1AppsOwnerNameAppNameBranchesGetResponse,
    Field1AppsOwnerNameAppNameBranchesGetResponseModel,
    Field1AppsOwnerNameAppNameBugtrackerCrashGroupCrashGroupIdGetResponse,
    Field1AppsOwnerNameAppNameBugtrackerCrashGroupCrashGroupIdGetResponseModel,
    Field1AppsOwnerNameAppNameBugtrackerGetResponse,
    Field1AppsOwnerNameAppNameBugtrackerGetResponseModel,
    Field1AppsOwnerNameAppNameBuildsBuildIdDistributePostRequest,
    Field1AppsOwnerNameAppNameBuildsBuildIdDistributePostResponse,
    Field1AppsOwnerNameAppNameBuildsBuildIdDownloadsDownloadTypeGetResponse,
    Field1AppsOwnerNameAppNameBuildsBuildIdGetResponse,
    Field1AppsOwnerNameAppNameBuildsBuildIdLogsGetResponse,
    Field1AppsOwnerNameAppNameBuildsBuildIdPatchRequest,
    Field1AppsOwnerNameAppNameBuildsBuildIdPatchResponse,
    Field1AppsOwnerNameAppNameBuildServiceStatusGetResponse,
    Field1AppsOwnerNameAppNameCommitsBatchGetResponse,
    Field1AppsOwnerNameAppNameCrashesCrashIdAttachmentsAttachmentIdLocationGetResponse,
    Field1AppsOwnerNameAppNameCrashesCrashIdAttachmentsAttachmentIdLocationGetResponseModel,
    Field1AppsOwnerNameAppNameCrashesCrashIdAttachmentsAttachmentIdTextGetResponse,
    Field1AppsOwnerNameAppNameCrashesCrashIdAttachmentsGetResponse,
    Field1AppsOwnerNameAppNameCrashesCrashIdAttachmentsGetResponseModel,
    Field1AppsOwnerNameAppNameCrashesCrashIdSessionLogsGetResponse,
    Field1AppsOwnerNameAppNameCrashesCrashIdSessionLogsGetResponseModel,
    Field1AppsOwnerNameAppNameCrashesInfoGetResponse,
    Field1AppsOwnerNameAppNameCrashesInfoGetResponseModel,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdDeleteResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdDeleteResponseModel,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdNativeDownloadGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdNativeGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdRawLocationGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdRawLocationGetResponseModel,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesCrashIdStacktraceGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdCrashesGetResponseModel,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdGetResponseModel,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequest,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchResponse,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchResponseModel,
    Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdStacktraceGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsGetResponse,
    Field1AppsOwnerNameAppNameCrashGroupsGetResponseModel,
    Field1AppsOwnerNameAppNameDeleteResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameDeleteRequest,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameDeleteResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameGetResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameGetResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameMetricsGetResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameMetricsGetResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePatchRequest,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePatchResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostRequest,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesDeleteResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesGetResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesGetResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequest,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequest,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostRequest,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameUploadsPostResponse,
    Field1AppsOwnerNameAppNameDeploymentsDeploymentNameUploadsPostResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsGetResponse,
    Field1AppsOwnerNameAppNameDeploymentsGetResponseModel,
    Field1AppsOwnerNameAppNameDeploymentsPostRequest,
    Field1AppsOwnerNameAppNameDeploymentsPostResponse,
    Field1AppsOwnerNameAppNameDeploymentsPostResponseModel,
    Field1AppsOwnerNameAppNameDeviceConfigurationsGetResponse,
    Field1AppsOwnerNameAppNameDeviceSelectionPostRequest,
    Field1AppsOwnerNameAppNameDeviceSelectionPostResponse,
    Field1AppsOwnerNameAppNameDeviceSelectionPostResponseModel,
    Field1AppsOwnerNameAppNameDiagnosticsSymbolGroupsGetResponse,
    Field1AppsOwnerNameAppNameDiagnosticsSymbolGroupsGetResponseModel,
    Field1AppsOwnerNameAppNameDiagnosticsSymbolGroupsInfoGetResponse,
    Field1AppsOwnerNameAppNameDiagnosticsSymbolGroupsInfoGetResponseModel,
    Field1AppsOwnerNameAppNameDiagnosticsSymbolGroupsSymbolGroupIdGetResponse,
    Field1AppsOwnerNameAppNameDiagnosticsSymbolGroupsSymbolGroupIdGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameDeleteResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameDevicesDownloadDevicesListGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameDevicesGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameDevicesGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequest,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequest,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequest,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameReleasesGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameReleasesGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameReleasesReleaseIdGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameReleasesReleaseIdGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequest,
    Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsGetResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionGroupsPostRequest,
    Field1AppsOwnerNameAppNameDistributionGroupsPostResponse,
    Field1AppsOwnerNameAppNameDistributionGroupsPostResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresPostRequest,
    Field1AppsOwnerNameAppNameDistributionStoresPostResponse,
    Field1AppsOwnerNameAppNameDistributionStoresPostResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameDeleteResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameLatestReleaseGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameLatestReleaseGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNamePatchRequest,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNamePatchResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdDeleteResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdPublishErrorDetailsGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdPublishErrorDetailsGetResponseModel,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdPublishLogsGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdRealtimestatusGetResponse,
    Field1AppsOwnerNameAppNameDistributionStoresStoreNameReleasesReleaseIdRealtimestatusGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsAvailableAppBuildsGetResponse,
    Field1AppsOwnerNameAppNameErrorsAvailableAppBuildsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsAvailableVersionsGetResponse,
    Field1AppsOwnerNameAppNameErrorsAvailableVersionsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorCountsPerDayGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorCountsPerDayGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorfreeDevicePercentagesGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorfreeDevicePercentagesGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorCountsPerDayGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorCountsPerDayGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorfreeDevicePercentagesGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorfreeDevicePercentagesGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdDeleteResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdDeleteResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdDownloadGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdDownloadGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdLocationGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdLocationGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsErrorIdStacktraceGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsLatestGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdErrorsLatestGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdModelsGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdModelsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdOperatingSystemsGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdOperatingSystemsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdPatchRequest,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdPatchResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdPatchResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdStacktraceGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsSearchGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorGroupsSearchGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorIdAttachmentsAttachmentIdLocationGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorIdAttachmentsAttachmentIdLocationGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorIdAttachmentsAttachmentIdTextGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorIdAttachmentsAttachmentIdTextGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorIdAttachmentsGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorIdAttachmentsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsErrorIdSessionLogsGetResponse,
    Field1AppsOwnerNameAppNameErrorsErrorIdSessionLogsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsRetentionSettingsGetResponse,
    Field1AppsOwnerNameAppNameErrorsRetentionSettingsGetResponseModel,
    Field1AppsOwnerNameAppNameErrorsSearchGetResponse,
    Field1AppsOwnerNameAppNameErrorsSearchGetResponseModel,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdDeleteResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdDisablePostResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdEnablePostResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdGetResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdGetResponseModel,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchRequest,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchResponseModel,
    Field1AppsOwnerNameAppNameExportConfigurationsGetResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsGetResponseModel,
    Field1AppsOwnerNameAppNameExportConfigurationsPostRequest,
    Field1AppsOwnerNameAppNameExportConfigurationsPostResponse,
    Field1AppsOwnerNameAppNameExportConfigurationsPostResponseModel,
    Field1AppsOwnerNameAppNameFileAssetPostRequest,
    Field1AppsOwnerNameAppNameFileAssetPostResponse,
    Field1AppsOwnerNameAppNameFileAssetPostResponseModel,
    Field1AppsOwnerNameAppNameGetResponse,
    Field1AppsOwnerNameAppNameGetResponseModel,
    Field1AppsOwnerNameAppNameInvitationsGetResponse,
    Field1AppsOwnerNameAppNameInvitationsGetResponseModel,
    Field1AppsOwnerNameAppNameInvitationsPostRequest,
    Field1AppsOwnerNameAppNameInvitationsPostResponse,
    Field1AppsOwnerNameAppNameInvitationsUserEmailDeleteResponse,
    Field1AppsOwnerNameAppNameInvitationsUserEmailPatchRequest,
    Field1AppsOwnerNameAppNameInvitationsUserEmailPatchResponse,
    Field1AppsOwnerNameAppNameInvitationsUserEmailPostRequest,
    Field1AppsOwnerNameAppNameInvitationsUserEmailPostResponse,
    Field1AppsOwnerNameAppNameNotificationsEmailSettingsGetResponse,
    Field1AppsOwnerNameAppNameNotificationsEmailSettingsGetResponseModel,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsGetResponse,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsIdGetResponse,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsIdPutRequest,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsIdPutResponse,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsIdPutResponseModel,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsPostRequest,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsPostResponse,
    Field1AppsOwnerNameAppNameOwnerDeviceSetsPostResponseModel,
    Field1AppsOwnerNameAppNamePatchRequest,
    Field1AppsOwnerNameAppNamePatchResponse,
    Field1AppsOwnerNameAppNamePatchResponseModel,
    Field1AppsOwnerNameAppNameRecentReleasesGetResponse,
    Field1AppsOwnerNameAppNameReleasesFilterByTesterGetResponse,
    Field1AppsOwnerNameAppNameReleasesGetResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdDeleteResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGetResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGetResponseModel,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdDeleteResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutRequest,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequest,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsPostResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsPostResponseModel,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPatchResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPatchResponseModel,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPatchResponseModel1,
    Field1AppsOwnerNameAppNameReleasesReleaseIdProvisioningProfileGetResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPutRequest,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPutResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPutResponseModel,
    Field1AppsOwnerNameAppNameReleasesReleaseIdPutResponseModel1,
    Field1AppsOwnerNameAppNameReleasesReleaseIdStoresPostRequest,
    Field1AppsOwnerNameAppNameReleasesReleaseIdStoresPostResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdStoresPostResponseModel,
    Field1AppsOwnerNameAppNameReleasesReleaseIdStoresStoreIdDeleteResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequest,
    Field1AppsOwnerNameAppNameReleasesReleaseIdTestersPostResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdTestersPostResponseModel,
    Field1AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdDeleteResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutRequest,
    Field1AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdUpdateDevicesResignIdGetResponse,
    Field1AppsOwnerNameAppNameReleasesReleaseIdUpdateDevicesResignIdGetResponseModel,
    Field1AppsOwnerNameAppNameRepoConfigDeleteResponse,
    Field1AppsOwnerNameAppNameRepoConfigDeleteResponseModel,
    Field1AppsOwnerNameAppNameRepoConfigGetResponse,
    Field1AppsOwnerNameAppNameRepoConfigGetResponseModel,
    Field1AppsOwnerNameAppNameRepoConfigPostRequest,
    Field1AppsOwnerNameAppNameRepoConfigPostResponse,
    Field1AppsOwnerNameAppNameRepoConfigPostResponseModel,
    Field1AppsOwnerNameAppNameSourceHostsSourceHostRepositoriesGetResponse,
    Field1AppsOwnerNameAppNameSourceHostsSourceHostRepositoriesGetResponseModel,
    Field1AppsOwnerNameAppNameStoreServiceStatusGetResponse,
    Field1AppsOwnerNameAppNameStoreServiceStatusGetResponseModel,
    Field1AppsOwnerNameAppNameSubscriptionsGetResponse,
    Field1AppsOwnerNameAppNameSubscriptionsPostResponse,
    Field1AppsOwnerNameAppNameSymbolsGetResponse,
    Field1AppsOwnerNameAppNameSymbolsGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdGetResponse,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdIgnorePostResponse,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdIgnorePostResponseModel,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdLocationGetResponse,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdLocationGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdStatusGetResponse,
    Field1AppsOwnerNameAppNameSymbolsSymbolIdStatusGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolUploadsGetResponse,
    Field1AppsOwnerNameAppNameSymbolUploadsGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolUploadsPostRequest,
    Field1AppsOwnerNameAppNameSymbolUploadsPostResponse,
    Field1AppsOwnerNameAppNameSymbolUploadsPostResponseModel,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdDeleteResponse,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdDeleteResponseModel,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdGetResponse,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdLocationGetResponse,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdLocationGetResponseModel,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequest,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchResponse,
    Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchResponseModel,
    Field1AppsOwnerNameAppNameTeamsGetResponse,
    Field1AppsOwnerNameAppNameTeamsGetResponseModel,
    Field1AppsOwnerNameAppNameTestersGetResponse,
    Field1AppsOwnerNameAppNameTestersGetResponseModel,
    Field1AppsOwnerNameAppNameTestersTesterIdDeleteResponse,
    Field1AppsOwnerNameAppNameTestExportAppsGetResponse,
    Field1AppsOwnerNameAppNameTestExportFileSetFilesGetResponse,
    Field1AppsOwnerNameAppNameTestExportGetResponse,
    Field1AppsOwnerNameAppNameTestExportHashFilesGetResponse,
    Field1AppsOwnerNameAppNameTestExportPipelineTestsGetResponse,
    Field1AppsOwnerNameAppNameTestExportTestRunsGetResponse,
    Field1AppsOwnerNameAppNameTestRunsGetResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdDeleteResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdGetResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdHashesBatchPostRequest,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdHashesBatchPostResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdHashesPostRequest,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdReportGetResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdStartPostRequest,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdStartPostResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdStateGetResponse,
    Field1AppsOwnerNameAppNameTestRunsTestRunIdStopPutResponse,
    Field1AppsOwnerNameAppNameTestSeriesGetResponse,
    Field1AppsOwnerNameAppNameTestSeriesPostRequest,
    Field1AppsOwnerNameAppNameTestSeriesPostResponse,
    Field1AppsOwnerNameAppNameTestSeriesPostResponseModel,
    Field1AppsOwnerNameAppNameTestSeriesTestSeriesSlugPatchRequest,
    Field1AppsOwnerNameAppNameTestSeriesTestSeriesSlugPatchResponse,
    Field1AppsOwnerNameAppNameTestSeriesTestSeriesSlugTestRunsGetResponse,
    Field1AppsOwnerNameAppNameToolsetsGetResponse,
    Field1AppsOwnerNameAppNameToolsetsGetResponseModel,
    Field1AppsOwnerNameAppNameTransferDestinationOwnerNamePostRequest,
    Field1AppsOwnerNameAppNameTransferDestinationOwnerNamePostResponse,
    Field1AppsOwnerNameAppNameTransferDestinationOwnerNamePostResponseModel,
    Field1AppsOwnerNameAppNameTransferToOrgPostRequest,
    Field1AppsOwnerNameAppNameTransferToOrgPostResponse,
    Field1AppsOwnerNameAppNameTransferToOrgPostResponseModel,
    Field1AppsOwnerNameAppNameUploadsReleasesPostRequest,
    Field1AppsOwnerNameAppNameUploadsReleasesPostResponse,
    Field1AppsOwnerNameAppNameUploadsReleasesPostResponseModel,
    Field1AppsOwnerNameAppNameUploadsReleasesUploadIdGetResponse,
    Field1AppsOwnerNameAppNameUploadsReleasesUploadIdGetResponseModel,
    Field1AppsOwnerNameAppNameUploadsReleasesUploadIdPatchRequest,
    Field1AppsOwnerNameAppNameUploadsReleasesUploadIdPatchResponse,
    Field1AppsOwnerNameAppNameUploadsReleasesUploadIdPatchResponseModel,
    Field1AppsOwnerNameAppNameUserDeviceSetsGetResponse,
    Field1AppsOwnerNameAppNameUserDeviceSetsIdGetResponse,
    Field1AppsOwnerNameAppNameUserDeviceSetsIdPutRequest,
    Field1AppsOwnerNameAppNameUserDeviceSetsIdPutResponse,
    Field1AppsOwnerNameAppNameUserDeviceSetsIdPutResponseModel,
    Field1AppsOwnerNameAppNameUserDeviceSetsPostRequest,
    Field1AppsOwnerNameAppNameUserDeviceSetsPostResponse,
    Field1AppsOwnerNameAppNameUserDeviceSetsPostResponseModel,
    Field1AppsOwnerNameAppNameUsersGetResponse,
    Field1AppsOwnerNameAppNameUsersGetResponseModel,
    Field1AppsOwnerNameAppNameUsersUserEmailDeleteResponse,
    Field1AppsOwnerNameAppNameUsersUserEmailPatchRequest,
    Field1AppsOwnerNameAppNameUsersUserEmailPatchResponse,
    Field1AppsOwnerNameAppNameVersionsGetResponse,
    Field1AppsOwnerNameAppNameVersionsGetResponseModel,
    Field1AppsOwnerNameAppNameWebhooksGetResponse,
    Field1AppsOwnerNameAppNameWebhooksGetResponseModel,
    Field1AppsOwnerNameAppNameXamarinSdkBundlesGetResponse,
    Field1AppsOwnerNameAppNameXamarinSdkBundlesGetResponseModel,
    Field1AppsOwnerNameAppNameXcodeVersionsGetResponse,
    Field1AppsOwnerNameAppNameXcodeVersionsGetResponseModel,
    Field1AppsPostRequest,
    Field1AppsPostResponse,
    Field1AppsPostResponseModel,
    Field1AzureSubscriptionsGetResponse,
    Field1AzureSubscriptionsGetResponseModel,
    Field1BillingAllAccountsAggregatedGetResponse,
    Field1BillingAllAccountsAggregatedGetResponseModel,
    Field1InvitationsSentGetResponse,
    Field1InvitationsSentGetResponseModel,
    Field1LegacyReportStatusDeployPostRequest,
    Field1LegacyReportStatusDeployPostResponse,
    Field1LegacyReportStatusDownloadPostRequest,
    Field1LegacyReportStatusDownloadPostResponse,
    Field1LegacyUpdateCheckGetResponse,
    Field1LegacyUpdateCheckGetResponseModel,
    Field1OrgsGetResponse,
    Field1OrgsGetResponseModel,
    Field1OrgsOrgNameAppsGetResponse,
    Field1OrgsOrgNameAppsGetResponseModel,
    Field1OrgsOrgNameAppsPostRequest,
    Field1OrgsOrgNameAppsPostResponse,
    Field1OrgsOrgNameAppsPostResponseModel,
    Field1OrgsOrgNameAvatarDeleteResponse,
    Field1OrgsOrgNameAvatarDeleteResponseModel,
    Field1OrgsOrgNameAvatarPostResponse,
    Field1OrgsOrgNameAvatarPostResponseModel,
    Field1OrgsOrgNameAzureSubscriptionsGetResponse,
    Field1OrgsOrgNameAzureSubscriptionsGetResponseModel,
    Field1OrgsOrgNameBillingAggregatedGetResponse,
    Field1OrgsOrgNameBillingAggregatedGetResponseModel,
    Field1OrgsOrgNameDeleteResponse,
    Field1OrgsOrgNameDistributionGroupsDetailsGetResponse,
    Field1OrgsOrgNameDistributionGroupsDetailsGetResponseModel,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequest,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameAppsGetResponse,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequest,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameDeleteResponse,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameGetResponse,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameGetResponseModel,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequest,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersGetResponse,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersGetResponseModel,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequest,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostResponse,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostResponseModel,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequest,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNamePatchResponse,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNamePatchResponseModel,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequest,
    Field1OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostResponse,
    Field1OrgsOrgNameDistributionGroupsGetResponse,
    Field1OrgsOrgNameDistributionGroupsGetResponseModel,
    Field1OrgsOrgNameDistributionGroupsPostRequest,
    Field1OrgsOrgNameDistributionGroupsPostResponse,
    Field1OrgsOrgNameDistributionGroupsPostResponseModel,
    Field1OrgsOrgNameGetResponse,
    Field1OrgsOrgNameGetResponseModel,
    Field1OrgsOrgNameInvitationsDeleteRequest,
    Field1OrgsOrgNameInvitationsDeleteResponse,
    Field1OrgsOrgNameInvitationsEmailPatchRequest,
    Field1OrgsOrgNameInvitationsEmailPatchResponse,
    Field1OrgsOrgNameInvitationsEmailResendPostRequest,
    Field1OrgsOrgNameInvitationsEmailResendPostResponse,
    Field1OrgsOrgNameInvitationsEmailRevokePostRequest,
    Field1OrgsOrgNameInvitationsEmailRevokePostResponse,
    Field1OrgsOrgNameInvitationsGetResponse,
    Field1OrgsOrgNameInvitationsGetResponseModel,
    Field1OrgsOrgNameInvitationsPostRequest,
    Field1OrgsOrgNameInvitationsPostResponse,
    Field1OrgsOrgNamePatchRequest,
    Field1OrgsOrgNamePatchResponse,
    Field1OrgsOrgNamePatchResponseModel,
    Field1OrgsOrgNameTeamsGetResponse,
    Field1OrgsOrgNameTeamsGetResponseModel,
    Field1OrgsOrgNameTeamsPostRequest,
    Field1OrgsOrgNameTeamsPostResponse,
    Field1OrgsOrgNameTeamsPostResponseModel,
    Field1OrgsOrgNameTeamsTeamNameAppsAppNameDeleteResponse,
    Field1OrgsOrgNameTeamsTeamNameAppsAppNamePatchRequest,
    Field1OrgsOrgNameTeamsTeamNameAppsAppNamePatchResponse,
    Field1OrgsOrgNameTeamsTeamNameAppsAppNamePatchResponseModel,
    Field1OrgsOrgNameTeamsTeamNameAppsGetResponse,
    Field1OrgsOrgNameTeamsTeamNameAppsGetResponseModel,
    Field1OrgsOrgNameTeamsTeamNameAppsPostRequest,
    Field1OrgsOrgNameTeamsTeamNameAppsPostResponse,
    Field1OrgsOrgNameTeamsTeamNameAppsPostResponseModel,
    Field1OrgsOrgNameTeamsTeamNameDeleteResponse,
    Field1OrgsOrgNameTeamsTeamNameGetResponse,
    Field1OrgsOrgNameTeamsTeamNameGetResponseModel,
    Field1OrgsOrgNameTeamsTeamNamePatchRequest,
    Field1OrgsOrgNameTeamsTeamNamePatchResponse,
    Field1OrgsOrgNameTeamsTeamNamePatchResponseModel,
    Field1OrgsOrgNameTeamsTeamNameUsersGetResponse,
    Field1OrgsOrgNameTeamsTeamNameUsersGetResponseModel,
    Field1OrgsOrgNameTeamsTeamNameUsersPostRequest,
    Field1OrgsOrgNameTeamsTeamNameUsersPostResponse,
    Field1OrgsOrgNameTeamsTeamNameUsersPostResponseModel,
    Field1OrgsOrgNameTeamsTeamNameUsersUserNameDeleteResponse,
    Field1OrgsOrgNameTestersGetResponse,
    Field1OrgsOrgNameTestersGetResponseModel,
    Field1OrgsOrgNameUsersGetResponse,
    Field1OrgsOrgNameUsersGetResponseModel,
    Field1OrgsOrgNameUsersUserNameAppsGetResponse,
    Field1OrgsOrgNameUsersUserNameAppsGetResponseModel,
    Field1OrgsOrgNameUsersUserNameDeleteResponse,
    Field1OrgsOrgNameUsersUserNameGetResponse,
    Field1OrgsOrgNameUsersUserNameGetResponseModel,
    Field1OrgsOrgNameUsersUserNamePatchRequest,
    Field1OrgsOrgNameUsersUserNamePatchResponse,
    Field1OrgsOrgNameUsersUserNamePatchResponseModel,
    Field1OrgsPostRequest,
    Field1OrgsPostResponse,
    Field1OrgsPostResponseModel,
    Field1PublicAppsAppIdReleasesReleaseIdIosManifestGetResponse,
    Field1PublicAppsOwnerNameAppNameInstallAnalyticsPostRequest,
    Field1PublicCodepushReportStatusDeployPostRequest,
    Field1PublicCodepushReportStatusDeployPostResponse,
    Field1PublicCodepushReportStatusDownloadPostRequest,
    Field1PublicCodepushReportStatusDownloadPostResponse,
    Field1PublicCodepushStatusGetResponse,
    Field1PublicCodepushStatusGetResponseModel,
    Field1PublicCodepushUpdateCheckGetResponse,
    Field1PublicCodepushUpdateCheckGetResponseModel,
    Field1PublicHooksPostRequest,
    Field1PublicHooksPostResponse,
    Field1PublicSdkAppsAppSecretDistributionGroupsDistributionGroupIdReleasesLatestGetResponse,
    Field1PublicSdkAppsAppSecretDistributionGroupsDistributionGroupIdReleasesLatestGetResponseModel,
    Field1PublicSdkAppsAppSecretReleasesLatestGetResponse,
    Field1PublicSdkAppsAppSecretReleasesLatestGetResponseModel,
    Field1PublicSdkAppsAppSecretReleasesReleaseHashPublicDistributionGroupsGetResponse,
    Field1PublicSdkAppsAppSecretReleasesReleaseHashPublicDistributionGroupsGetResponseModel,
    Field1PublicSparkleAppsAppSecretGetResponse,
    Field1SdkAppsAppSecretReleasesPrivateLatestGetResponse,
    Field1SdkAppsAppSecretReleasesPrivateLatestGetResponseModel,
    Field1SdkAppsAppSecretReleasesReleaseHashGetResponse,
    Field1SdkAppsAppSecretReleasesReleaseHashGetResponseModel,
    Field1UserDevicesDeviceUdidDeleteResponse,
    Field1UserDevicesDeviceUdidGetResponse,
    Field1UserDevicesDeviceUdidGetResponseModel,
    Field1UserDevicesGetResponse,
    Field1UserDevicesGetResponseModel,
    Field1UserDsrDeletePostResponse,
    Field1UserDsrDeletePostResponseModel,
    Field1UserDsrDeleteTokenCancelPostRequest,
    Field1UserDsrDeleteTokenCancelPostResponse,
    Field1UserDsrDeleteTokenCancelPostResponseModel,
    Field1UserDsrDeleteTokenGetResponse,
    Field1UserDsrDeleteTokenGetResponseModel,
    Field1UserDsrExportPostResponse,
    Field1UserDsrExportPostResponseModel,
    Field1UserDsrExportTokenCancelPostResponse,
    Field1UserDsrExportTokenCancelPostResponseModel,
    Field1UserDsrExportTokenGetResponse,
    Field1UserDsrExportTokenGetResponseModel,
    Field1UserExportServiceConnectionsGetResponse,
    Field1UserExportServiceConnectionsGetResponseModel,
    Field1UserGetResponse,
    Field1UserGetResponseModel,
    Field1UserInvitationsAppsInvitationTokenAcceptPostRequest,
    Field1UserInvitationsAppsInvitationTokenAcceptPostResponse,
    Field1UserInvitationsAppsInvitationTokenRejectPostRequest,
    Field1UserInvitationsAppsInvitationTokenRejectPostResponse,
    Field1UserInvitationsDistributionGroupsAcceptPostRequest,
    Field1UserInvitationsDistributionGroupsAcceptPostResponse,
    Field1UserInvitationsOrgsInvitationTokenAcceptPostRequest,
    Field1UserInvitationsOrgsInvitationTokenAcceptPostResponse,
    Field1UserInvitationsOrgsInvitationTokenRejectPostRequest,
    Field1UserInvitationsOrgsInvitationTokenRejectPostResponse,
    Field1UserMetadataOptimizelyGetResponse,
    Field1UserMetadataOptimizelyGetResponseModel,
    Field1UserNotificationsEmailSettingsGetResponse,
    Field1UserNotificationsEmailSettingsGetResponseModel,
    Field1UserPatchRequest,
    Field1UserPatchResponse,
    Field1UserPatchResponseModel,
    Field1UsersUserIdDevicesRegisterPostRequest,
    Field1UsersUserIdDevicesRegisterPostResponse,
    Field1UsersUserIdDevicesRegisterPostResponseModel,
)

app = MCPProxy(
    contact={'x-twitter': 'microsoft'},
    description='Microsoft Visual Studio App Center API',
    title='App Center Client',
    version='v0.1',
    servers=[{'url': 'https://api.appcenter.ms'}],
)


@app.get(
    '/v0.1/account/test/export',
    description=""" Lists all the endpoints available for Test accounts data """,
    tags=['user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_accounts():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/account/test/export/accounts',
    description=""" Lists account data """,
    tags=['gdpr_account_export', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_account():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/account/test/export/featureFlags',
    description=""" Lists feature flag data """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_feature_flag():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/administeredOrgs',
    description=""" Returns a list organizations in which the requesting user is an admin """,
    tags=['data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organizations_list_administered():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/api_tokens',
    description=""" Returns api tokens for the authenticated user """,
    tags=['user_management', 'data_subject_requests_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def user_api_tokens_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/api_tokens',
    description=""" Creates a new User API token """,
    tags=['user_api_token_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def user_api_tokens_new(body: Field1ApiTokensPostRequest = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/api_tokens/{api_token_id}',
    description=""" Delete the user api_token object with the specific id """,
    tags=['user_api_token_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def user_api_tokens_delete(api_token_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps',
    description=""" Returns a list of apps """,
    tags=['data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_list(field_order_by: Optional[FieldOrderBy] = Query(None, alias='$orderBy')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps',
    description=""" Creates a new app and returns it to the caller """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_create(body: Field1AppsPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}',
    description=""" Delete an app """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_delete(app_name: str, owner_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}',
    description=""" Return a specific app with the given app name which belongs to the given owner. """,
    tags=['app_management', 'organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_get(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}',
    description=""" Partially updates a single app """,
    tags=['app_management', 'app_management_for_org', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_update(
    app_name: str,
    owner_name: str = ...,
    body: Field1AppsOwnerNameAppNamePatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts',
    description=""" Count of active devices by interval in the time range. """,
    tags=['app_management', 'user_management', 'analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__device_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    app_build: Optional[str] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences',
    description=""" Get list of audiences. """,
    tags=['organization_management', 'user_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__list_audiences(
    include_disabled: Optional[bool] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test',
    description=""" Tests audience definition. """,
    tags=['analytics_audience_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__test_audience(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties',
    description=""" Get list of custom properties. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__list_custom_properties(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties',
    description=""" Get list of device properties. """,
    tags=['organization_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__list_device_properties(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values',
    description=""" Get list of device property values. """,
    tags=['user_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__list_device_property_values(
    property_name: str,
    contains: Optional[str] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
    description=""" Deletes audience definition. """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__delete_audience(
    audience_name: constr(pattern=r'[^/]+', max_length=64),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
    description=""" Gets audience definition. """,
    tags=['organization_management', 'app_management', 'user_metadata_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__get_audience(
    audience_name: constr(pattern=r'[^/]+', max_length=64),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
    description=""" Returns whether audience definition exists. """,
    tags=['organization_management', 'user_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__audience_name_exists(
    audience_name: constr(pattern=r'[^/]+', max_length=64),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
    description=""" Creates or updates audience definition. """,
    tags=['analytics_audience_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__create_or_update_audience(
    audience_name: constr(pattern=r'[^/]+', max_length=64),
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts',
    description=""" Count of crashes by day in the time range based the selected versions. Available for UWP apps only. """,
    tags=['app_management', 'app_api_token_management', 'app_gdpr_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    """
    Available for UWP apps only.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups',
    description=""" Overall crashes and affected users count of the selected crash groups with selected versions. """,
    tags=['analytics_crash_management', 'crash_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_groups_totals(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameAnalyticsCrashGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts',
    description=""" Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_group_counts(
    crash_group_id: str,
    version: str = ...,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    """
    Available for UWP apps only.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models',
    description=""" Top models of the selected crash group with selected version. Available for UWP apps only. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_group_model_counts(
    crash_group_id: str,
    version: str = ...,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    owner_name: str = ...,
    app_name: str = ...,
):
    """
    Available for UWP apps only.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems',
    description=""" Top OSes of the selected crash group with selected version. Available for UWP apps only. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_group_operating_system_counts(
    crash_group_id: str,
    version: str = ...,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    owner_name: str = ...,
    app_name: str = ...,
):
    """
    Available for UWP apps only.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall',
    description=""" Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_group_totals(
    crash_group_id: str, version: str = ..., owner_name: str = ..., app_name: str = ...
):
    """
    Available for UWP apps only.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages',
    description=""" Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices. """,
    tags=['data_subject_requests_management', 'gdpr_account_export', 'app_gdpr_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__crash_free_device_percentages(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    version: str = ...,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts',
    description=""" Count of total downloads for the provided distribution releases. """,
    tags=['app_management', 'release_management', 'analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__distribution_release_counts(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}',
    description=""" Delete the set of Events with the specified event names. """,
    tags=['analytics_event_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__events_delete_logs(
    event_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events',
    description=""" Count of active events in the time range ordered by event. """,
    tags=['analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__events(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    event_name: Optional[EventName] = None,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    field_skip: Optional[conint(ge=0)] = Query(0, alias='$skip'),
    field_inlinecount: Optional[FieldInlinecount] = Query('none', alias='$inlinecount'),
    field_orderby: Optional[str] = Query('count desc', alias='$orderby'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}',
    description=""" Delete the set of Events with the specified event names. """,
    tags=[
        'analytics_event_management',
        'app_management',
        'data_subject_requests_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__events_delete(
    event_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device',
    description=""" Count of events per device by interval in the time range. """,
    tags=['analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__event_per_device_count(
    event_name: str,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session',
    description=""" Count of events per session by interval in the time range. """,
    tags=['analytics_event_management', 'analytics_session_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__event_per_session_count(
    event_name: str,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count',
    description=""" Count of devices for an event by interval in the time range. """,
    tags=['analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__event_device_count(
    event_name: str,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count',
    description=""" Count of events by interval in the time range. """,
    tags=['analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__event_count(
    event_name: str,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties',
    description=""" Event properties. """,
    tags=['analytics_event_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__event_properties(
    event_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts',
    description=""" Event properties value counts during the time range in descending order. """,
    tags=['analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__event_property_counts(
    event_name: str,
    event_property_name: str = ...,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    field_top: Optional[conint(ge=0)] = Query(10, alias='$top'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow',
    description=""" Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call. """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__generic_log_flow(
    start: Optional[datetime_aliased] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/languages',
    description=""" Languages in the time range. """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__language_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow',
    description=""" Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call. """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__log_flow(
    start: Optional[datetime_aliased] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/models',
    description=""" Models in the time range. """,
    tags=['user_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__model_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/oses',
    description=""" OSes in the time range. """,
    tags=['data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__operating_system_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/places',
    description=""" Places in the time range. """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__place_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts',
    description=""" Count of sessions in the time range. """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__session_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution',
    description=""" Gets session duration. """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__session_durations_distribution(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device',
    description=""" Count of sessions per device in the time range. """,
    tags=['data_subject_requests_management', 'gdpr_account_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__per_device_counts(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/analytics/versions',
    description=""" Count of active versions in the time range ordered by version. """,
    tags=[
        'user_management',
        'app_management_for_org',
        'data_subject_requests_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def analytics__versions(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=2000)] = Query(30, alias='$top'),
    versions: Optional[Versions1] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/api_tokens',
    description=""" Returns App API tokens for the app """,
    tags=['app_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def app_api_tokens_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/api_tokens',
    description=""" Creates a new App API token """,
    tags=['user_api_token_management', 'app_api_token_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def app_api_tokens_new(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameApiTokensPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}',
    description=""" Delete the App Api Token object with the specific ID """,
    tags=['user_api_token_management', 'app_api_token_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def app_api_tokens_delete(
    owner_name: str, app_name: str = ..., api_token_id: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/apple_mapping',
    description=""" Delete mapping of apple app to an existing app in apple store. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apple_mapping_delete(owner_name: str, app_name: str = ..., body: str = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/apple_mapping',
    description=""" Get mapping of apple app to an existing app in apple store. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apple_mapping_get(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/apple_mapping',
    description=""" Create a mapping for an existing app in apple store for the specified application. """,
    tags=['apple_mapping_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apple_mapping_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameAppleMappingPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups',
    description=""" Fetch all apple test flight groups """,
    tags=[
        'organization_management',
        'app_management',
        'user_management',
        'app_ownership_transfer',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apple_mapping__test_flight_groups(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/avatar',
    description=""" Deletes the uploaded app avatar """,
    tags=['app_management', 'organization_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_delete_avatar(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/avatar',
    description=""" Sets the app avatar """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_update_avatar(owner_name: str, app_name: str = ..., file: UploadFile = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions',
    description=""" Returns a list of azure subscriptions for the app """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def azure_subscription_list_for_app(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions',
    description=""" Link azure subscription to an app """,
    tags=['azure_subscription_management', 'app_management_for_org', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def azure_subscription_link_for_app(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameAzureSubscriptionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}',
    description=""" Delete the azure subscriptions for the app """,
    tags=['azure_subscription_management', 'organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def azure_subscription_delete_for_app(
    azure_subscription_id: UUID, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/billing/aggregated',
    description=""" Aggregated Billing Information for owner of a given app. """,
    tags=['user_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def billing_aggregated_information_get_by_app(
    service: Optional[Service13] = None,
    period: Optional[Period] = None,
    show_original_plans: Optional[bool] = Query(None, alias='showOriginalPlans'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/branches',
    description=""" Returns the list of Git branches for this application """,
    tags=['app_management', 'organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_list_branches(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds',
    description=""" Returns the list of builds for the branch """,
    tags=[
        'branch_configuration_management',
        'app_management',
        'organization_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_list_by_branch(branch: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds',
    description=""" Create a build """,
    tags=[
        'build_operations',
        'branch_configuration_management',
        'repository_operations',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_create(
    branch: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameBranchesBranchBuildsPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config',
    description=""" Deletes the branch build configuration """,
    tags=['branch_configuration_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def branch_configurations_delete(
    branch: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameBranchesBranchConfigDeleteRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config',
    description=""" Gets the branch configuration """,
    tags=[
        'branch_configuration_management',
        'organization_management',
        'app_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def branch_configurations_get(branch: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config',
    description=""" Configures the branch for build """,
    tags=['branch_configuration_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def branch_configurations_create(
    branch: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameBranchesBranchConfigPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config',
    description=""" Reconfigures the branch for build """,
    tags=['branch_configuration_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def branch_configurations_update(
    branch: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameBranchesBranchConfigPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config',
    description=""" Gets the build configuration in Azure pipeline YAML format """,
    tags=['gdpr_account_export', 'app_management', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def build_configurations_get(
    branch: str,
    format: Optional[Format] = 'yaml',
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects',
    description=""" Returns the projects in the repository for the branch, for all toolsets """,
    tags=['branch_configuration_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_list_toolset_projects(
    branch: str,
    os: Os12 = ...,
    platform: Platform13 = ...,
    max_search_depth: Optional[conint(ge=1, le=10)] = Query(
        None, alias='maxSearchDepth'
    ),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/bugtracker',
    description=""" Get bug tracker settings for a particular app """,
    tags=['app_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def bugtracker_get_settings(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}',
    description=""" Get project issue related to a crash group """,
    tags=['analytics_crash_management', 'crash_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def bug_tracker_get_repo_issue_from_crash(
    crash_group_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/build_service_status',
    description=""" Application specific build service status """,
    tags=[
        'organization_management',
        'user_management',
        'app_management',
        'app_invitation_management',
        'user_metadata_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_get_status_by_app_id(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}',
    description=""" Returns the build detail for the given build ID """,
    tags=['build_operations'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_get(build_id: PositiveInt, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}',
    description=""" Cancels a build """,
    tags=['build_operations', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_update(
    build_id: PositiveInt,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameBuildsBuildIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute',
    description=""" Distribute a build """,
    tags=['build_operations', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_distribute(
    build_id: PositiveInt,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameBuildsBuildIdDistributePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}',
    description=""" Gets the download URI """,
    tags=['build_operations', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_get_download_uri(
    build_id: PositiveInt,
    download_type: DownloadType = ...,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs',
    description=""" Get the build log """,
    tags=['build_operations'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_get_log(build_id: PositiveInt, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/commits/batch',
    description=""" Returns commit information for a batch of shas """,
    tags=['app_management', 'user_management', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def commits_list_by_sha_list(
    hashes: Hashes, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups',
    description=""" Gets a list of crash groups and whether the list contains all available groups. """,
    tags=['app_management', 'release_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crash_groups_list(
    last_occurrence_from: Optional[datetime_aliased] = None,
    last_occurrence_to: Optional[datetime_aliased] = None,
    app_version: Optional[str] = None,
    group_type: Optional[GroupType2] = None,
    group_status: Optional[GroupStatus] = None,
    group_text_search: Optional[str] = None,
    field_orderby: Optional[FieldOrderby] = Query(
        'last_occurrence desc', alias='$orderby'
    ),
    continuation_token: Optional[str] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}',
    description=""" Gets a specific group. """,
    tags=[
        'crash_management',
        'analytics_crash_management',
        'analytics_event_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crash_groups_get(crash_group_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}',
    description=""" Updates a group. """,
    tags=['analytics_crash_management', 'crash_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crash_groups_update(
    crash_group_id: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes',
    description=""" Gets all crashes of a group. """,
    tags=[
        'analytics_crash_management',
        'crash_management',
        'error_tracking',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_list(
    crash_group_id: str,
    include_report: Optional[bool] = False,
    include_log: Optional[bool] = False,
    date_from: Optional[datetime_aliased] = None,
    date_to: Optional[datetime_aliased] = None,
    app_version: Optional[str] = None,
    error_type: Optional[ErrorType] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}',
    description=""" Delete a specific crash and related attachments and blobs for an app. """,
    tags=['analytics_crash_management', 'crash_management', 'error_retention_settings'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_delete(
    crash_group_id: str,
    crash_id: str = ...,
    retention_delete: Optional[bool] = False,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}',
    description=""" Gets a specific crash for an app. """,
    tags=[
        'analytics_crash_management',
        'crash_management',
        'error_detail_retrieval',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get(
    crash_group_id: str,
    crash_id: str = ...,
    include_report: Optional[bool] = False,
    include_log: Optional[bool] = False,
    include_details: Optional[bool] = False,
    include_stacktrace: Optional[bool] = False,
    grouping_only: Optional[bool] = False,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native',
    description=""" Gets the native log of a specific crash. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_native_crash(
    crash_group_id: str, crash_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download',
    description=""" Gets the native log of a specific crash as a text attachment. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_native_crash_download(
    crash_group_id: str, crash_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location',
    description=""" Gets the URI location to download json of a specific crash. """,
    tags=[
        'analytics_crash_management',
        'crash_management',
        'analytics_crash_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_raw_crash_location(
    crash_group_id: str, crash_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace',
    description=""" Gets a stacktrace for a specific crash. """,
    tags=['analytics_crash_management', 'crash_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_stacktrace(
    crash_group_id: str,
    crash_id: str = ...,
    grouping_only: Optional[bool] = False,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace',
    description=""" Gets a stacktrace for a specific crash. """,
    tags=['analytics_crash_management', 'crash_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crash_groups_get_stacktrace(
    crash_group_id: str,
    grouping_only: Optional[bool] = False,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments',
    description=""" Gets all attachments for a specific crash. """,
    tags=['analytics_crash_management', 'crash_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_list_attachments(crash_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location',
    description=""" Gets the URI location to download crash attachment. """,
    tags=['analytics_crash_management', 'crash_management', 'crash_reporting'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_crash_attachment_location(
    crash_id: str, attachment_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text',
    description=""" Gets content of the text attachment. """,
    tags=[
        'analytics_crash_management',
        'crash_management',
        'error_tracking',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_crash_text_attachment_content(
    crash_id: str, attachment_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs',
    description=""" Get session logs by crash ID """,
    tags=[
        'analytics_crash_management',
        'crash_management',
        'error_tracking',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes__list_session_logs(
    crash_id: str,
    date: Optional[datetime_aliased] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/crashes_info',
    description=""" Gets whether the application has any crashes. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_app_crashes_info(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/deployments',
    description=""" Gets a list of CodePush deployments for the given app """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployments_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/deployments',
    description=""" Creates a CodePush Deployment for the given app """,
    tags=['app_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployments_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}',
    description=""" Deletes a CodePush Deployment for the given app """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployments_delete(
    deployment_name: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsDeploymentNameDeleteRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}',
    description=""" Gets a CodePush Deployment for the given app """,
    tags=['organization_management', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployments_get(
    deployment_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}',
    description=""" Modifies a CodePush Deployment for the given app """,
    tags=['app_management', 'app_management_for_org', 'release_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployments_update(
    deployment_name: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics',
    description=""" Gets all releases metrics for specified Deployment """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployment_metrics_get(
    deployment_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}',
    description=""" Promote one release (default latest one) from one deployment to another """,
    tags=['app_management', 'release_management', 'build_operations'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployments_promote(
    deployment_name: str,
    promote_deployment_name: str = ...,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases',
    description=""" Clears a Deployment of releases """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployment_releases_delete(
    deployment_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases',
    description=""" Gets the history of releases on a Deployment """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployment_releases_get(
    deployment_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases',
    description=""" Create a new CodePush release for the specified deployment """,
    tags=['app_management', 'release_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployment_releases_create(
    deployment_name: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}',
    description=""" Modifies a CodePush release metadata under the given Deployment """,
    tags=['release_management', 'app_management', 'build_operations'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def deployment_releases_update(
    deployment_name: str,
    release_label: str = ...,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release',
    description=""" Rollback the latest or a specific release for an app deployment """,
    tags=['code_push_operations', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployment_release_rollback(
    deployment_name: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads',
    description=""" Create a new CodePush release upload for the specified deployment """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def code_push_deployment_upload_create(
    deployment_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/device_configurations',
    description=""" Returns a list of available devices """,
    tags=['app_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_device_configurations(
    app_upload_id: Optional[UUID] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/device_selection',
    description=""" Creates a short ID for a list of devices """,
    tags=['app_management', 'organization_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_create_device_selection(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDeviceSelectionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs',
    description=""" **Warning, this operation is not reversible.** 

A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.
 """,
    tags=['app_management', 'app_ownership_transfer', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app__block_logs(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}',
    description=""" **Warning, this operation is not reversible.**

 A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.
 """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices__block_logs(install_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups',
    description=""" Gets top N (ordered by crash count) of crash groups by missing symbol """,
    tags=['analytics_crash_management', 'crash_management', 'symbol_group_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def missing_symbol_groups_list(top: int, owner_name: str = ..., app_name: str = ...):
    """
    Gets top N (ordered by crash count) of crash groups by missing symbol
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}',
    description=""" Gets missing symbol crash group by its id """,
    tags=['analytics_crash_management', 'symbol_group_analysis', 'crash_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def missing_symbol_groups_get(
    symbol_group_id: str, owner_name: str = ..., app_name: str = ...
):
    """
    Gets missing symbol crash group by its id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info',
    description=""" Gets application level statistics for all missing symbol groups """,
    tags=['symbol_group_analysis', 'analytics_event_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def missing_symbol_groups_info(owner_name: str, app_name: str = ...):
    """
    Gets application level statistics for all missing symbol groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups',
    description=""" Returns a list of distribution groups in the app specified """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups',
    description=""" Creates a new distribution group and returns it to the caller """,
    tags=['app_management', 'distribution_group_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}',
    description=""" Deletes a distribution group """,
    tags=['app_management', 'distribution_group_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_delete(
    app_name: str, owner_name: str = ..., distribution_group_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}',
    description=""" Returns a single distribution group for a given distribution group name """,
    tags=['distribution_group_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_get(
    owner_name: str, app_name: str = ..., distribution_group_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}',
    description=""" Updates the attributes of distribution group """,
    tags=['distribution_group_management', 'app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_update(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices',
    description=""" Returns all devices associated with the given distribution group """,
    tags=['distribution_group_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_list(
    distribution_group_name: str,
    release_id: Optional[float] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list',
    description=""" Returns all devices associated with the given distribution group. """,
    tags=['distribution_group_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_list_csv_format(
    distribution_group_name: str,
    unprovisioned_only: Optional[bool] = False,
    udids: Optional[Udids] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members',
    description=""" Returns a list of member details in the distribution group specified """,
    tags=['organization_management', 'distribution_group_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_list_users(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    exclude_pending_invitations: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members',
    description=""" Adds the members to the specified distribution group """,
    tags=['distribution_group_management', 'app_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_add_user(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete',
    description=""" Remove the users from the distribution group """,
    tags=['distribution_group_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_remove_user(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases',
    description=""" Return basic information about distributed releases in a given distribution group. """,
    tags=['distribution_group_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_list_by_distribution_group(
    distribution_group_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}',
    description=""" Deletes a release with id 'release_id' in a given distribution group. """,
    tags=['distribution_group_management', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_delete_with_distribution_group_id(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    release_id: int = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}',
    description=""" Return detailed information about a distributed release in a given distribution group. """,
    tags=['app_management', 'distribution_group_management', 'release_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_get_latest_by_distribution_group(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    release_id: str = ...,
    is_install_page: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite',
    description=""" Resend distribution group app invite notification to previously invited testers """,
    tags=[
        'organization_management',
        'app_invitation_management',
        'distribution_group_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_resend_invite(
    owner_name: str,
    app_name: str = ...,
    distribution_group_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores',
    description=""" Get all the store details from Storage store table for a particular application. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def stores_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores',
    description=""" Create a new external store for the specified application. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def stores_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionStoresPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}',
    description=""" delete the store based on specific store name. """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def stores_delete(
    store_name: str, owner_name: str = ..., app_name: str = ..., body: str = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}',
    description=""" Return the store details for specified store name. """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def stores_get(store_name: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}',
    description=""" Update the store. """,
    tags=['store_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def stores_patch(
    store_name: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameDistributionStoresStoreNamePatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release',
    description=""" Returns the latest release published in a store. """,
    tags=['app_management_for_org', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_releases_get_latest(
    store_name: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases',
    description=""" Return all releases published  in a store """,
    tags=['store_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_releases_list(store_name: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}',
    description=""" delete the release with release Id """,
    tags=['store_management', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_releases_delete(
    store_name: str,
    release_id: str = ...,
    owner_name: str = ...,
    app_name: str = ...,
    body: str = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}',
    description=""" Return releases published in a store for releaseId and storeId """,
    tags=['store_management', 'release_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_releases_get(
    store_name: str, release_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details',
    description=""" Return the Error Details of release which failed in publishing. """,
    tags=['store_management', 'release_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_releases_get_publish_error(
    store_name: str, release_id: float = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs',
    description=""" Returns publish logs for a particular release published to a particular store """,
    tags=['store_management', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_release_publish_logs_get(
    store_name: str, release_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus',
    description=""" Return the Real time Status publishing of release from store. """,
    tags=['store_management', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_releases_get_real_time_status_by_release_id(
    store_name: str, release_id: float = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds',
    description=""" List of app builds """,
    tags=['error_tracking', 'error_detail_retrieval', 'error_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__app_builds_list(
    version: str,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=1000)] = Query(30, alias='$top'),
    error_type: Optional[ErrorType2] = Query(None, alias='errorType'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions',
    description=""" Get all available versions in the time range. """,
    tags=['analytics_event_management', 'analytics_session_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__available_versions(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=1000)] = Query(30, alias='$top'),
    field_skip: Optional[conint(ge=0)] = Query(0, alias='$skip'),
    field_filter: Optional[str] = Query(None, alias='$filter'),
    field_inlinecount: Optional[FieldInlinecount] = Query('none', alias='$inlinecount'),
    error_type: Optional[ErrorType2] = Query(None, alias='errorType'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay',
    description=""" Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. """,
    tags=[
        'error_tracking',
        'error_group_management',
        'error_analysis',
        'error_detail_retrieval',
        'error_search_operations',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__counts_per_day(
    version: Optional[str] = None,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    app_build: Optional[str] = None,
    error_type: Optional[ErrorType6] = Query(None, alias='errorType'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups',
    description=""" List of error groups """,
    tags=[
        'analytics_crash_management',
        'error_tracking',
        'error_group_management',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_list(
    version: Optional[str] = None,
    app_build: Optional[str] = None,
    group_state: Optional[str] = Query(None, alias='groupState'),
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    field_orderby: Optional[str] = Query('count desc', alias='$orderby'),
    field_top: Optional[conint(ge=0, le=1000)] = Query(30, alias='$top'),
    error_type: Optional[ErrorType8] = Query(None, alias='errorType'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search',
    description=""" Error groups list based on search parameters """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_groups_search(
    filter: Optional[str] = None,
    q: Optional[str] = None,
    order: Optional[Order] = 'desc',
    sort: Optional[Sort] = 'matchingReportsCount',
    field_top: Optional[conint(ge=1, le=100)] = Query(100, alias='$top'),
    field_skip: Optional[conint(ge=0)] = Query(0, alias='$skip'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}',
    description=""" Error group details """,
    tags=['error_group_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_details(
    error_group_id: str = Path(..., alias='errorGroupId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}',
    description=""" Update error group state """,
    tags=['error_group_management', 'error_tracking', 'error_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__update_state(
    error_group_id: str = Path(..., alias='errorGroupId'),
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameErrorsErrorGroupsErrorGroupIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay',
    description=""" Count of errors by day in the time range of the selected error group with selected version """,
    tags=['error_group_management', 'error_tracking', 'error_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_counts_per_day(
    error_group_id: str = Path(..., alias='errorGroupId'),
    version: Optional[str] = None,
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages',
    description=""" Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices """,
    tags=['error_group_management', 'error_tracking', 'error_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_error_free_device_percentages(
    error_group_id: str = Path(..., alias='errorGroupId'),
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors',
    description=""" Get all errors for group """,
    tags=['error_group_management', 'error_tracking', 'error_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__list_for_group(
    error_group_id: str = Path(..., alias='errorGroupId'),
    start: datetime_aliased = ...,
    end: Optional[datetime_aliased] = None,
    field_top: Optional[conint(ge=0, le=1000)] = Query(30, alias='$top'),
    model: Optional[str] = None,
    os: Optional[str] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest',
    description=""" Latest error details. """,
    tags=['error_group_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__latest_error_details(
    error_group_id: str = Path(..., alias='errorGroupId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}',
    description=""" Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days. """,
    tags=[
        'error_group_management',
        'error_tracking',
        'error_detail_retrieval',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__delete_error(
    error_group_id: str = Path(..., alias='errorGroupId'),
    error_id: str = Path(..., alias='errorId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}',
    description=""" Error details. """,
    tags=[
        'error_group_management',
        'error_tracking',
        'error_detail_retrieval',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__get_error_details(
    error_group_id: str = Path(..., alias='errorGroupId'),
    error_id: str = Path(..., alias='errorId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download',
    description=""" Download details for a specific error. """,
    tags=[
        'error_group_management',
        'error_tracking',
        'error_detail_retrieval',
        'error_analysis',
        'error_retention_settings',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_download(
    error_group_id: str = Path(..., alias='errorGroupId'),
    error_id: str = Path(..., alias='errorId'),
    format: Optional[Format2] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location',
    description=""" Error location. """,
    tags=[
        'error_group_management',
        'error_tracking',
        'error_detail_retrieval',
        'error_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_location(
    error_group_id: str = Path(..., alias='errorGroupId'),
    error_id: str = Path(..., alias='errorId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace',
    description=""" Error Stacktrace details. """,
    tags=['error_group_management', 'error_tracking', 'error_detail_retrieval'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_stack_trace(
    error_group_id: str = Path(..., alias='errorGroupId'),
    error_id: str = Path(..., alias='errorId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models',
    description=""" Top models of the selected error group. """,
    tags=['error_group_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_model_counts(
    error_group_id: str = Path(..., alias='errorGroupId'),
    field_top: Optional[conint(ge=0, le=1000)] = Query(30, alias='$top'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems',
    description=""" Top OSes of the selected error group. """,
    tags=['error_group_management', 'error_tracking'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_operating_system_counts(
    error_group_id: str = Path(..., alias='errorGroupId'),
    field_top: Optional[conint(ge=0, le=1000)] = Query(30, alias='$top'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace',
    description=""" Gets the stack trace for the error group. """,
    tags=['error_group_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__group_error_stack_trace(
    error_group_id: str = Path(..., alias='errorGroupId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages',
    description=""" Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices """,
    tags=['analytics_crash_management', 'error_tracking', 'error_analysis'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_free_device_percentages(
    start: datetime_aliased,
    end: Optional[datetime_aliased] = None,
    versions: Optional[Versions1] = None,
    app_build: Optional[str] = None,
    error_type: Optional[ErrorType10] = Query(None, alias='errorType'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings',
    description=""" gets the retention settings in days """,
    tags=['error_retention_settings'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors_get_retention_settings(owner_name: str, app_name: str = ...):
    """
    gets the retention settings in days
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/search',
    description=""" Errors list based on search parameters """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_search(
    filter: Optional[str] = None,
    q: Optional[str] = None,
    order: Optional[Order] = 'desc',
    sort: Optional[Sort2] = 'timestamp',
    field_top: Optional[conint(ge=1, le=100)] = Query(100, alias='$top'),
    field_skip: Optional[conint(ge=0)] = Query(0, alias='$skip'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments',
    description=""" List error attachments. """,
    tags=['error_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_attachments(
    error_id: str = Path(..., alias='errorId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location',
    description=""" Error attachment location. """,
    tags=[
        'error_tracking',
        'error_detail_retrieval',
        'error_analysis',
        'error_retention_settings',
        'error_search_operations',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_attachment_location(
    error_id: str = Path(..., alias='errorId'),
    attachment_id: str = Path(..., alias='attachmentId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text',
    description=""" Error attachment text. """,
    tags=['error_tracking', 'error_detail_retrieval', 'error_group_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__error_attachment_text(
    error_id: str = Path(..., alias='errorId'),
    attachment_id: str = Path(..., alias='attachmentId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs',
    description=""" Get session logs by error ID """,
    tags=[
        'error_tracking',
        'error_group_management',
        'error_detail_retrieval',
        'error_analysis',
        'error_retention_settings',
        'error_search_operations',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def errors__list_session_logs(
    error_id: str = Path(..., alias='errorId'),
    date: Optional[datetime_aliased] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations',
    description=""" List export configurations. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations',
    description=""" Create new export configuration """,
    tags=['gdpr_account_export', 'app_management', 'app_gdpr_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameExportConfigurationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}',
    description=""" Delete export configuration. """,
    tags=['gdpr_account_export', 'export_configuration_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__delete(
    export_configuration_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}',
    description=""" Get export configuration. """,
    tags=['export_configuration_management', 'app_management', 'gdpr_account_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__get(
    export_configuration_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}',
    description=""" Partially update export configuration. """,
    tags=['export_configuration_management', 'app_gdpr_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__partial_update(
    export_configuration_id: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable',
    description=""" Disable export configuration. """,
    tags=['export_configuration_management', 'app_gdpr_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__disable(
    export_configuration_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable',
    description=""" Enable export configuration. """,
    tags=['export_configuration_management', 'app_gdpr_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def export_configurations__enable(
    export_configuration_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/file_asset',
    description=""" Create a new asset to upload a file """,
    tags=['app_management', 'app_management_for_org', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def file_assets_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameFileAssetPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/invitations',
    description=""" Gets the pending invitations for the app """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/invitations',
    description=""" Invites a new or existing user to an app """,
    tags=[
        'app_invitation_management',
        'organization_management',
        'invitation_handling',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameInvitationsPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}',
    description=""" Removes a user's invitation to an app """,
    tags=['user_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_delete(owner_name: str, app_name: str = ..., user_email: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}',
    description=""" Update pending invitation permission """,
    tags=[
        'organization_management',
        'app_invitation_management',
        'invitation_handling',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_update_permissions(
    owner_name: str,
    app_name: str = ...,
    user_email: str = ...,
    body: Field1AppsOwnerNameAppNameInvitationsUserEmailPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}',
    description=""" Invites a new or existing user to an app """,
    tags=['organization_management', 'app_invitation_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_create_by_email(
    owner_name: str,
    app_name: str = ...,
    user_email: str = ...,
    body: Field1AppsOwnerNameAppNameInvitationsUserEmailPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings',
    description=""" Get Email notification settings of user for a particular app """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def notifications_get_app_email_settings(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets',
    description=""" Lists device sets belonging to the owner """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_list_device_sets_of_owner(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets',
    description=""" Creates a device set belonging to the owner """,
    tags=[
        'device_set_operations',
        'user_management',
        'app_management',
        'organization_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_create_device_set_of_owner(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameOwnerDeviceSetsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}',
    description=""" Deletes a device set belonging to the owner """,
    tags=['app_management_for_org', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_delete_device_set_of_owner(
    id: UUID, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}',
    description=""" Gets a device set belonging to the owner """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_device_set_of_owner(id: UUID, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}',
    description=""" Updates a device set belonging to the owner """,
    tags=['device_set_operations', 'app_management_for_org', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_update_device_set_of_owner(
    id: UUID,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameOwnerDeviceSetsIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/recent_releases',
    description=""" Get the latest release from every distribution group associated with an application. """,
    tags=['app_management', 'organization_management', 'app_api_token_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_list_latest(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/releases',
    description=""" Return basic information about releases. """,
    tags=['app_management', 'release_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_list(
    published_only: Optional[bool] = None,
    scope: Optional[str] = None,
    top: Optional[float] = None,
    release_id: Optional[float] = Query(None, alias='releaseId'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester',
    description=""" Return detailed information about releases avaiable to a tester. """,
    tags=['app_management', 'user_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_available_to_tester(
    published_only: Optional[bool] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
    description=""" Deletes a release. """,
    tags=['release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_delete(release_id: int, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
    description=""" Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups). """,
    tags=['release_management', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_get_latest_by_user(
    release_id: str,
    udid: Optional[str] = None,
    is_install_page: Optional[bool] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
    description=""" Updates a release. """,
    tags=['release_management', 'app_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_update(release_id: int, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
    description=""" Update details of a release. """,
    tags=['release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_update_details(
    release_id: int,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameReleasesReleaseIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups',
    description=""" Distributes a release to a group """,
    tags=['release_management', 'app_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_add_distribution_group(
    release_id: int,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}',
    description=""" Delete the given distribution group from the release """,
    tags=['release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_delete_distribution_group(
    release_id: int, group_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}',
    description=""" Update details about the specified distribution group associated with the release """,
    tags=['release_management', 'app_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_put_distribution_group(
    release_id: int,
    group_id: UUID = ...,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile',
    description=""" Return information about the provisioning profile. Only available for iOS. """,
    tags=['release_management', 'app_management', 'provisioning_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def provisioning_profile(release_id: int, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores',
    description=""" Distributes a release to a store """,
    tags=['release_management', 'store_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_add_store(
    release_id: int,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameReleasesReleaseIdStoresPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}',
    description=""" Delete the given distribution store from the release """,
    tags=['release_management', 'store_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_delete_distribution_store(
    release_id: int, store_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers',
    description=""" Distributes a release to a user """,
    tags=['release_management', 'tester_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_add_testers(
    release_id: int,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}',
    description=""" Delete the given tester from the release """,
    tags=['tester_management', 'test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_delete_distribution_tester(
    release_id: int, tester_id: str = ..., owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}',
    description=""" Update details about the specified tester associated with the release """,
    tags=['tester_management', 'release_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_put_distribution_tester(
    release_id: int,
    tester_id: UUID = ...,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}',
    description=""" Returns the resign status to the caller """,
    tags=['release_management', 'provisioning_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_get_release_update_devices_status(
    release_id: str,
    resign_id: str = ...,
    include_provisioning_profile: Optional[bool] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/repo_config',
    description=""" Removes the configuration for the repository """,
    tags=[
        'organization_management',
        'app_management',
        'user_management',
        'app_ownership_transfer',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def repository_configurations_delete(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/repo_config',
    description=""" Returns the repository build configuration status of the app """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def repository_configurations_list(
    include_inactive: Optional[bool] = Query(None, alias='includeInactive'),
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/repo_config',
    description=""" Configures the repository for build """,
    tags=['app_management', 'repository_configuration_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def repository_configurations_create_or_update(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameRepoConfigPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories',
    description=""" Gets the repositories available from the source code host """,
    tags=[
        'app_management',
        'build_operations',
        'repository_operations',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def repositories_list(
    source_host: SourceHost,
    vsts_account_name: Optional[str] = Query(None, alias='vstsAccountName'),
    vsts_project_id: Optional[str] = Query(None, alias='vstsProjectId'),
    service_connection_id: Optional[str] = None,
    form: Optional[Form] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/store_service_status',
    description=""" Application specific store service status """,
    tags=['app_management', 'organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def store_notifications_get_notification_by_app_id(
    owner_name: str, app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/subscriptions',
    description=""" Get information about the currently active subscriptions, if any """,
    tags=['organization_management', 'app_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_subscriptions(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/subscriptions',
    description=""" Accept a free trial subscription """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_create_subscription(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads',
    description=""" Gets a list of all uploads for the specified application """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbol_uploads_list(
    top: Optional[conint(ge=1, le=100)] = 30,
    status: Optional[Status31] = None,
    symbol_type: Optional[SymbolType3] = None,
    owner_name: str = ...,
    app_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads',
    description=""" Begins the symbol upload process for a new set of symbols for the specified application """,
    tags=['app_management', 'app_ownership_transfer', 'symbol_upload_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbol_uploads_create(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameSymbolUploadsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}',
    description=""" Deletes a symbol upload by id for the specified application """,
    tags=['symbol_upload_management', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbol_uploads_delete(
    symbol_upload_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}',
    description=""" Gets a symbol upload by id for the specified application """,
    tags=['symbol_upload_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbol_uploads_get(
    symbol_upload_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}',
    description=""" Commits or aborts the symbol upload process for a new set of symbols for the specified application """,
    tags=['symbol_upload_management', 'app_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbol_uploads_complete(
    symbol_upload_id: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location',
    description=""" Gets the URL to download the symbol upload """,
    tags=['symbol_upload_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbol_uploads_get_location(
    symbol_upload_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbols',
    description=""" Returns the list of all symbols for the provided application """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbols_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}',
    description=""" Returns a particular symbol by id (uuid) for the provided application """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbols_get(symbol_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore',
    description=""" Marks a symbol by id (uuid) as ignored """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbols_ignore(symbol_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location',
    description=""" Gets the URL to download the symbol """,
    tags=['app_management', 'organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbols_get_location(symbol_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status',
    description=""" Returns a particular symbol by id (uuid) for the provided application """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def symbols_get_status(symbol_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/teams',
    description=""" Returns the details of all teams that have access to the app. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_get_teams(app_name: str, owner_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test/export',
    description=""" Lists all the endpoints available for Test apps data """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_apps(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test/export/apps',
    description=""" Lists app data """,
    tags=['user_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_app(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles',
    description=""" Lists file set file data """,
    tags=['organization_management', 'app_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_file_set_file(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles',
    description=""" Lists hash file data """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_hash_file(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests',
    description=""" Lists pipeline test data """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_pipeline_test(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns',
    description=""" Lists test run data """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_gdpr_export_test_run(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs',
    description=""" Returns a list of test runs """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_test_runs(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs',
    description=""" Creates a new test run """,
    tags=['user_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_create_test_run(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}',
    description=""" Logically deletes a test run """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_archive_test_run(
    test_run_id: UUID, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}',
    description=""" Returns a single test runs """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_test_run(test_run_id: UUID, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files',
    description=""" Uploads file for a test run """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_start_uploading_file(
    test_run_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes',
    description=""" Adds file with the given hash to a test run """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_upload_hash(
    test_run_id: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameTestRunsTestRunIdHashesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch',
    description=""" Adds file with the given hash to a test run """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_upload_hashes_batch(
    test_run_id: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameTestRunsTestRunIdHashesBatchPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report',
    description=""" Returns a single test report """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_test_report(test_run_id: UUID, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start',
    description=""" Starts test run """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_start_test_run(
    test_run_id: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameTestRunsTestRunIdStartPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state',
    description=""" Gets state of the test run """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_test_run_state(
    test_run_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop',
    description=""" Stop a test run execution """,
    tags=['test_run_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_stop_test_run(test_run_id: str, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test_series',
    description=""" Returns list of all test series for an application """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_all_test_series(
    query: Optional[str] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/test_series',
    description=""" Creates new test series for an application """,
    tags=['app_management', 'app_management_for_org', 'test_series_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_create_test_series(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameTestSeriesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}',
    description=""" Deletes a single test series """,
    tags=['test_series_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_delete_test_series(
    test_series_slug: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}',
    description=""" Updates name and slug of a test series """,
    tags=['test_series_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_patch_test_series(
    test_series_slug: str,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameTestSeriesTestSeriesSlugPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs',
    description=""" Returns list of all test runs for a given test series """,
    tags=['test_series_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_all_test_runs_for_series(
    test_series_slug: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/testers',
    description=""" Returns the testers associated with the app specified with the given app name which belongs to the given owner. """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_list_testers(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}',
    description=""" Delete the given tester from the all releases """,
    tags=['tester_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_delete_tester_from_destinations(
    tester_id: str, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/toolsets',
    description=""" Returns available toolsets for application """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_list_toolsets(
    tools: Optional[Tools] = None, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}',
    description=""" Transfers ownership of an app to a different user or organization """,
    tags=['app_ownership_transfer', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_transfer_ownership(
    owner_name: str,
    app_name: str = ...,
    destination_owner_name: str = ...,
    body: Field1AppsOwnerNameAppNameTransferDestinationOwnerNamePostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org',
    description=""" Transfers ownership of an app to a new organization """,
    tags=['app_ownership_transfer', 'organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_transfer_to_org(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameTransferToOrgPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/uploads/releases',
    description=""" Initiate a new release upload. This API is part of multi-step upload process. """,
    tags=['app_management', 'release_management', 'app_ownership_transfer'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_create_release_upload(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameUploadsReleasesPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}',
    description=""" Get the current status of the release upload. """,
    tags=['data_subject_requests_management', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_get_release_upload_status(
    upload_id: UUID, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}',
    description=""" Update the current status of the release upload. """,
    tags=['release_management', 'app_management', 'upload_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_update_release_upload_status(
    upload_id: UUID,
    extract: Optional[bool] = None,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameUploadsReleasesUploadIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/user/device_sets',
    description=""" Lists device sets belonging to the user """,
    tags=['organization_management', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_list_device_sets_of_user(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/apps/{owner_name}/{app_name}/user/device_sets',
    description=""" Creates a device set belonging to the user """,
    tags=['device_set_operations', 'user_device_set_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_create_device_set_of_user(
    owner_name: str,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameUserDeviceSetsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}',
    description=""" Deletes a device set belonging to the user """,
    tags=['user_management', 'app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_delete_device_set_of_user(
    id: UUID, owner_name: str = ..., app_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}',
    description=""" Gets a device set belonging to the user """,
    tags=['app_management_for_org', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_get_device_set_of_user(id: UUID, owner_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}',
    description=""" Updates a device set belonging to the user """,
    tags=['device_set_operations', 'user_device_set_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def test_update_device_set_of_user(
    id: UUID,
    owner_name: str = ...,
    app_name: str = ...,
    body: Field1AppsOwnerNameAppNameUserDeviceSetsIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/users',
    description=""" Returns the users associated with the app specified with the given app name which belongs to the given owner. """,
    tags=['app_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}',
    description=""" Removes the user from the app """,
    tags=['organization_management', 'app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_remove_user(owner_name: str, app_name: str = ..., user_email: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}',
    description=""" Update user permission for the app """,
    tags=['app_management', 'user_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_update_user_permissions(
    owner_name: str,
    app_name: str = ...,
    user_email: str = ...,
    body: Field1AppsOwnerNameAppNameUsersUserEmailPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/versions',
    description=""" Gets a list of application versions. """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def crashes_get_app_versions(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/webhooks',
    description=""" Get web hooks configured for a particular app """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def webhooks_list(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles',
    description=""" Gets the Xamarin SDK bundles available to this app """,
    tags=['organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_list_xamarin_s_d_k_bundles(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/apps/{owner_name}/{app_name}/xcode_versions',
    description=""" Gets the Xcode versions available to this app """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def builds_list_xcode_versions(owner_name: str, app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/azure_subscriptions',
    description=""" Returns a list of azure subscriptions for the user """,
    tags=[
        'gdpr_account_export',
        'app_management_for_org',
        'data_subject_requests_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def azure_subscription_list_for_user():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/billing/allAccountsAggregated',
    description=""" Aggregated Billing Information for the requesting user and the organizations in which the user is an admin. """,
    tags=['data_subject_requests_management', 'gdpr_account_export'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def billing_aggregated_information_get_all(
    service: Optional[Service13] = None,
    period: Optional[Period] = None,
    show_original_plans: Optional[bool] = Query(None, alias='showOriginalPlans'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/invitations/sent',
    description=""" Returns all invitations sent by the caller """,
    tags=['user_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def invitations_sent():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/legacy/reportStatus/deploy',
    description=""" Report deploy of specified release """,
    tags=['organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def legacy_code_push_acquisition_update_installs_status(
    body: Field1LegacyReportStatusDeployPostRequest,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/legacy/reportStatus/download',
    description=""" Report download of specified release """,
    tags=['gdpr_account_export', 'app_gdpr_export', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def legacy_code_push_acquisition_update_download_status(
    body: Field1LegacyReportStatusDownloadPostRequest,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/legacy/updateCheck',
    description=""" Check for updates """,
    tags=[
        'app_management',
        'release_management',
        'code_push_operations',
        'app_api_token_management',
        'notifications_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def legacy_code_push_acquisition_update_check(
    deployment_key: Optional[str] = Query(None, alias='deploymentKey'),
    app_version: Optional[str] = Query(None, alias='appVersion'),
    package_hash: Optional[str] = Query(None, alias='packageHash'),
    label: Optional[str] = None,
    client_unique_id: Optional[str] = Query(None, alias='clientUniqueId'),
    is_companion: Optional[str] = Query(None, alias='isCompanion'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs',
    description=""" Returns a list of organizations the requesting user has access to """,
    tags=['app_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organizations_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs',
    description=""" Creates a new organization and returns it to the caller """,
    tags=['organization_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organizations_create_or_update(body: Field1OrgsPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{orgName}/billing/aggregated',
    description=""" Aggregated Billing Information for a given Organization. """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'app_management_for_org',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def billing_aggregated_information_get_for_org(
    org_name: str = Path(..., alias='orgName'),
    service: Optional[Service13] = None,
    period: Optional[Period] = None,
    show_original_plans: Optional[bool] = Query(None, alias='showOriginalPlans'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}',
    description=""" Deletes a single organization """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organizations_delete(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}',
    description=""" Returns the details of a single organization """,
    tags=['organization_management', 'user_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organizations_get(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/orgs/{org_name}',
    description=""" Returns a list of organizations the requesting user has access to """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organizations_update(org_name: str, body: Field1OrgsOrgNamePatchRequest = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/apps',
    description=""" Returns a list of apps for the organization """,
    tags=[
        'organization_management',
        'user_management',
        'organization_invitations_management',
        'team_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_list_for_org(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/apps',
    description=""" Creates a new app for the organization and returns it to the caller """,
    tags=['organization_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_create_for_org(org_name: str, body: Field1OrgsOrgNameAppsPostRequest = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/avatar',
    description=""" Deletes the uploaded organization avatar """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'team_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organization_delete_avatar(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/avatar',
    description=""" Sets the organization avatar """,
    tags=['organization_management', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def organization_update_avatar(org_name: str, file: UploadFile = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/azure_subscriptions',
    description=""" Returns a list of azure subscriptions for the organization """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'app_management_for_org',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def azure_subscription_list_for_org(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/distribution_groups',
    description=""" Returns a list of distribution groups in the org specified """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'team_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_list_for_org(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/distribution_groups',
    description=""" Creates a disribution goup which can be shared across apps under an organization """,
    tags=['organization_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_create_for_org(
    org_name: str, body: Field1OrgsOrgNameDistributionGroupsPostRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}',
    description=""" Deletes a single distribution group from an org with a given distribution group name """,
    tags=['organization_management', 'distribution_group_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_delete_for_org(
    org_name: str, distribution_group_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}',
    description=""" Returns a single distribution group in org for a given distribution group name """,
    tags=['distribution_group_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_get_for_org(org_name: str, distribution_group_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}',
    description=""" Update one given distribution group name in an org """,
    tags=['distribution_group_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_patch_for_org(
    org_name: str,
    distribution_group_name: str = ...,
    body: Field1OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps',
    description=""" Get apps from a distribution group in an org """,
    tags=['distribution_group_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_get_apps(org_name: str, distribution_group_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps',
    description=""" Add apps to distribution group in an org """,
    tags=['distribution_group_management', 'organization_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_add_apps(
    org_name: str,
    distribution_group_name: str = ...,
    body: Field1OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete',
    description=""" Delete apps from distribution group in an org """,
    tags=['distribution_group_management', 'app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_bulk_delete_apps(
    org_name: str,
    distribution_group_name: str = ...,
    body: Field1OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members',
    description=""" Returns a list of member in the distribution group specified """,
    tags=['organization_management', 'distribution_group_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_list_users_for_org(
    org_name: str, distribution_group_name: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members',
    description=""" Accepts an array of user email addresses to get added to the specified group """,
    tags=['organization_management', 'distribution_group_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_add_users_for_org(
    org_name: str,
    distribution_group_name: str = ...,
    body: Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete',
    description=""" Delete testers from distribution group in an org """,
    tags=['distribution_group_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_bulk_delete_users(
    org_name: str,
    distribution_group_name: str = ...,
    body: Field1OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite',
    description=""" Resend shared distribution group invite notification to previously invited testers """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'app_invitation_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_resend_shared_invite(
    org_name: str,
    distribution_group_name: str = ...,
    body: Field1OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/distribution_groups_details',
    description=""" Returns a list of distribution groups with details for an organization """,
    tags=['organization_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_details_for_org(
    org_name: str, apps_limit: Optional[float] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/invitations',
    description=""" Removes a user's invitation to an organization """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'invitation_handling',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_delete(
    org_name: str, body: Field1OrgsOrgNameInvitationsDeleteRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/invitations',
    description=""" Gets the pending invitations for the organization """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_list_pending(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/invitations',
    description=""" Invites a new or existing user to an organization """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'invitation_handling',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_create(
    org_name: str, body: Field1OrgsOrgNameInvitationsPostRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/orgs/{org_name}/invitations/{email}',
    description=""" Allows the role of an invited user to be changed """,
    tags=['organization_management', 'organization_invitations_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_update(
    org_name: str,
    email: str = ...,
    body: Field1OrgsOrgNameInvitationsEmailPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/invitations/{email}/resend',
    description=""" Cancels an existing organization invitation for the user and sends a new one """,
    tags=[
        'organization_management',
        'organization_invitations_management',
        'invitation_handling',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_send_new_invitation(
    org_name: str,
    email: str = ...,
    body: Field1OrgsOrgNameInvitationsEmailResendPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/invitations/{email}/revoke',
    description=""" Removes a user's invitation to an organization """,
    tags=['organization_management', 'organization_invitations_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_(
    org_name: str,
    email: str = ...,
    body: Field1OrgsOrgNameInvitationsEmailRevokePostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/teams',
    description=""" Returns the list of all teams in this org """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_list_all(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/teams',
    description=""" Creates a team and returns it """,
    tags=['organization_management', 'team_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_create_team(org_name: str, body: Field1OrgsOrgNameTeamsPostRequest = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/teams/{team_name}',
    description=""" Deletes a single team """,
    tags=['organization_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_delete(org_name: str, team_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/teams/{team_name}',
    description=""" Returns the details of a single team """,
    tags=['organization_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_get_team(org_name: str, team_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/orgs/{org_name}/teams/{team_name}',
    description=""" Updates a single team """,
    tags=['organization_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_update(
    org_name: str,
    team_name: str = ...,
    body: Field1OrgsOrgNameTeamsTeamNamePatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/teams/{team_name}/apps',
    description=""" Returns the apps a team has access to """,
    tags=['organization_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_list_apps(org_name: str, team_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/teams/{team_name}/apps',
    description=""" Adds an app to a team """,
    tags=['organization_management', 'app_management_for_org', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_add_app(
    org_name: str,
    team_name: str = ...,
    body: Field1OrgsOrgNameTeamsTeamNameAppsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}',
    description=""" Removes an app from a team """,
    tags=['organization_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_remove_app(org_name: str, team_name: str = ..., app_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}',
    description=""" Updates the permissions the team has to the app """,
    tags=[
        'app_management',
        'organization_management',
        'app_management_for_org',
        'team_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_update_permissions(
    org_name: str,
    team_name: str = ...,
    app_name: str = ...,
    body: Field1OrgsOrgNameTeamsTeamNameAppsAppNamePatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/teams/{team_name}/users',
    description=""" Returns the users of a team which is owned by an organization """,
    tags=['organization_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_get_users(org_name: str, team_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/orgs/{org_name}/teams/{team_name}/users',
    description=""" Adds a new user to a team that is owned by an organization """,
    tags=['organization_management', 'user_management', 'team_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_add_user(
    org_name: str,
    team_name: str = ...,
    body: Field1OrgsOrgNameTeamsTeamNameUsersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}',
    description=""" Removes a user from a team that is owned by an organization """,
    tags=[
        'organization_management',
        'user_management',
        'organization_invitations_management',
        'team_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def teams_remove_user(org_name: str, team_name: str = ..., user_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/testers',
    description=""" Returns a unique list of users including the whole organization members plus testers in any shared group of that org """,
    tags=[
        'organization_management',
        'user_management',
        'organization_invitations_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_groups_list_all_testers_for_org(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/users',
    description=""" Returns a list of users that belong to an organization """,
    tags=['organization_management', 'app_management_for_org'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_list_for_org(org_name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/orgs/{org_name}/users/{user_name}',
    description=""" Removes a user from an organization. """,
    tags=[
        'organization_management',
        'user_management',
        'organization_invitations_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_remove_from_org(org_name: str, user_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/users/{user_name}',
    description=""" Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission """,
    tags=[
        'organization_management',
        'user_management',
        'organization_invitations_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_get_for_org(org_name: str, user_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/orgs/{org_name}/users/{user_name}',
    description=""" Updates the given organization user """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_update_org_role(
    org_name: str,
    user_name: str = ...,
    body: Field1OrgsOrgNameUsersUserNamePatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/orgs/{org_name}/users/{user_name}/apps',
    description=""" Get a user apps information from an organization by name """,
    tags=['organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def apps_get_for_org_user(org_name: str, user_name: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest',
    description=""" Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS. """,
    tags=['app_management', 'release_management'],
)
def releases_get_ios_manifest(app_id: str, release_id: int = ..., token: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics',
    description=""" Notify download(s) for the provided distribution release(s). """,
    tags=['app_management', 'app_management_for_org', 'subscription_management'],
)
def distibution_releases_install_analytics(
    owner_name: str,
    app_name: str = ...,
    body: Field1PublicAppsOwnerNameAppNameInstallAnalyticsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/public/codepush/report_status/deploy',
    description=""" Report Deployment status metric """,
    tags=['code_push_operations', 'code_push_management', 'release_management'],
)
def code_push_acquisition_update_deploy_status(
    body: Field1PublicCodepushReportStatusDeployPostRequest,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/public/codepush/report_status/download',
    description=""" Report download of specified release """,
    tags=['code_push_operations', 'code_push_management', 'release_management'],
)
def code_push_acquisition_update_download_status(
    body: Field1PublicCodepushReportStatusDownloadPostRequest,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/codepush/status',
    description=""" Returns the acquisition service status to the caller """,
    tags=['user_management', 'team_management', 'organization_management'],
)
def code_push_acquisition_get_acquisition_status():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/codepush/update_check',
    description=""" Check for updates """,
    tags=['build_operations', 'code_push_operations', 'release_management'],
)
def code_push_acquisition_update_check(
    deployment_key: str,
    app_version: str = ...,
    package_hash: Optional[str] = None,
    label: Optional[str] = None,
    client_unique_id: Optional[str] = None,
    is_companion: Optional[bool] = None,
    previous_label_or_app_version: Optional[str] = None,
    previous_deployment_key: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/public/hooks',
    description=""" Public webhook sink """,
    tags=['user_management', 'data_subject_requests_management'],
)
def builds_webhook(body: Field1PublicHooksPostRequest = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest',
    description=""" Get a release with 'latest' for the given public group. """,
    tags=['distribution_group_management', 'app_management'],
)
def releases_get_latest_by_public_distribution_group(
    app_secret: str,
    distribution_group_id: str = ...,
    is_install_page: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/sdk/apps/{app_secret}/releases/latest',
    description=""" Get the latest public release for the given app. """,
    tags=['app_management'],
)
def releases_get_latest_public_release(app_secret: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups',
    description=""" Get all public distribution groups that a given release has been distributed to """,
    tags=['release_management', 'app_management'],
)
def releases_get_public_groups_for_release_by_hash(
    app_secret: str, release_hash: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/public/sparkle/apps/{app_secret}',
    description=""" Gets the sparkle feed of the releases that are distributed to all the public distribution groups. """,
    tags=['app_management', 'user_management'],
)
def releases_get_sparkle_feed(app_secret: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/sdk/apps/{app_secret}/releases/private/latest',
    description=""" Get the latest release distributed to a private group the given user is a member of for the given app. """,
    tags=['user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_get_latest_private_release(app_secret: str, udid: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}',
    description=""" If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def releases_get_latest_by_hash(
    app_secret: str, release_hash: str = ..., udid: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user',
    description=""" Returns the user profile data """,
    tags=['gdpr_account_export', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_get():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v0.1/user',
    description=""" Updates the user profile and returns the updated user data """,
    tags=['user_management', 'user_metadata_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_update(body: Field1UserPatchRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/devices',
    description=""" Returns all devices associated with the given user. """,
    tags=['user_management', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_user_devices_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v0.1/user/devices/{device_udid}',
    description=""" Removes an existing device from a user """,
    tags=['device_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_remove_user_device(device_udid: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/devices/{device_udid}',
    description=""" Returns the device details. """,
    tags=['device_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_device_details(device_udid: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/dsr/delete',
    tags=['gdpr_account_export', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def data_subject_right__delete_request():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/dsr/delete/{token}',
    tags=['user_api_token_management', 'organization_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def data_subject_right__delete_status_request(token: UUID, email: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/dsr/delete/{token}/cancel',
    tags=['user_api_token_management', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def data_subject_right__cancel_delete_request(
    token: UUID, body: Field1UserDsrDeleteTokenCancelPostRequest = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/dsr/export',
    tags=['user_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def data_subject_right__export_request():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/dsr/export/{token}',
    tags=['user_api_token_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def data_subject_right__export_status_request(token: UUID):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/dsr/export/{token}/cancel',
    tags=['user_api_token_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def data_subject_right__cancel_export_request(token: UUID):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/export/serviceConnections',
    description=""" Gets all service connections of the service type for GDPR export. """,
    tags=['gdpr_account_export', 'data_subject_requests_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def sharedconnection__connections():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/invitations/apps/{invitation_token}/accept',
    description=""" Accepts a pending invitation for the specified user """,
    tags=[
        'organization_management',
        'invitation_handling',
        'app_invitation_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_accept(
    invitation_token: str,
    body: Field1UserInvitationsAppsInvitationTokenAcceptPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/invitations/apps/{invitation_token}/reject',
    description=""" Rejects a pending invitation for the specified user """,
    tags=[
        'organization_management',
        'invitation_handling',
        'app_invitation_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def app_invitations_reject(
    invitation_token: str,
    body: Field1UserInvitationsAppsInvitationTokenRejectPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/invitations/distribution_groups/accept',
    description=""" Accepts all pending invitations to distribution groups for the specified user """,
    tags=['organization_management', 'invitation_handling'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def distribution_group_invitations_accept_all(
    body: Field1UserInvitationsDistributionGroupsAcceptPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/invitations/orgs/{invitation_token}/accept',
    description=""" Accepts a pending organization invitation for the specified user """,
    tags=[
        'organization_management',
        'invitation_handling',
        'organization_invitations_management',
    ],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_accept(
    invitation_token: str,
    body: Field1UserInvitationsOrgsInvitationTokenAcceptPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/user/invitations/orgs/{invitation_token}/reject',
    description=""" Rejects a pending organization invitation """,
    tags=['organization_invitations_management', 'invitation_handling'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def org_invitations_reject(
    invitation_token: str,
    body: Field1UserInvitationsOrgsInvitationTokenRejectPostRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/metadata/optimizely',
    tags=['data_subject_requests_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def users_get_user_metadata():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v0.1/user/notifications/emailSettings',
    description=""" Get Default email notification settings for the user """,
    tags=['user_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def notifications_get_user_email_settings():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v0.1/users/{user_id}/devices/register',
    description=""" Registers a user for an existing device """,
    tags=['user_management', 'user_device_set_management'],
    security=[
        APIKeyHeader(name="X-API-Token"),
    ],
)
def devices_register_user_for_device(
    user_id: str, body: Field1UsersUserIdDevicesRegisterPostRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
